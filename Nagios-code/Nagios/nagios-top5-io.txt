Nagios top5 io
***************

###########################################################################################
									LINUX
############################################################################################

NODE-SCRIPT
***********
#!/bin/bash
sudo iotop -botqqq --iter=10 | awk '{ print $13 }' > /home/$(whoami)/iodata

name=$(cat /home/$(whoami)/iodata | head -n 5 | awk  'BEGIN { ORS="," } { print }')

first=$(cat /home/$(whoami)/iodata | head -n 5 | awk -F: 'NR==1 {print $1,$2}'  | tr -d [,] | tr -s '[:blank:]' ':')
pid=$(ps -eo pid,comm,cmd | grep -w $first | awk -F: 'NR==1 {print $1}' | awk '{ print $1 }')

echo "first process pid ---> ###############$pid --> $first"

free=$(iostat | awk -F: 'NR==4 {print $1}' | awk '{ print $6 }')
#echo "free io --> $free"
int=${free%.*}
#echo "$int"

total=100

used=$(( $total - $int ))

#echo "used io ---> $used"

if (( $used<=60 )); then
                echo "OK - I/O Usage of $used top5 IO --> $name"
                exit 0
        elif (( 61<=$used && $used<=70 )); then
                echo "WARNING - I/O Usage of $used top5 IO --> $name"
                exit 1
        elif (( 71<=$used )); then
                echo "CRITICAL - I/O Usage of $used top5 IO --> $name"
#                curl -D - \
#                -X "POST" -H "Accept: application/json" \
#                -H "Content-Type: application/json" \
#                -H "X-Rundeck-Auth-Token: NSUt9PpUTTJ6INH7xcjt09VyMcr8cexX" \
#                http://192.168.5.116:4440/api/16/job/0bd07a19-bea8-43f4-bf8d-9d748a04917d/executions
                exit 2
        else
                echo "UNKNOWN - $used top5 IO --> $name"
                exit 3
fi



RUNDECK-SCRIPT
**************

#!/bin/bash

PID=20071

count=$(systemctl list-units --type=service | awk '{ print $1 }' | grep '.service' | wc -l)

echo "$count"

check=0

max=1

while [ $max -le $count ]

do
    echo $max

val=$(systemctl list-units --type=service | awk '{ print $1 }' | grep '.service' | awk -F: 'NR=='$max' {print $1}')

    echo "$val"

    max=$(($max+1))

test=$(systemctl status $val | grep $PID | awk '{ print $1 }' | awk -F: 'NR=='1' { print $1 }')

if [ ! -z $test ]; then

echo "ok"

systemctl restart $val

check=$(($check+1))

echo "service $val restarted"

else

echo "###########novalue#############"

fi

done

if [ $check -ge 1 ];then
{
echo " SERVICE RESTARTED"
}
else
{
echo " SERVICE NOT RESTARTED"

name=$(cat /home/$(whoami)/iodata | head -n 5 | awk -F: 'NR==1 {print $1,$2}'  | tr -d [,] | tr -s '[:blank:]' ':' | head -c 4)

count=$(systemctl list-units --type=service | awk '{ print $1 }' | grep '.service' | wc -l)

echo "$count"

max=1

while [ $max -le $count ]

do
    echo $max

val=$(systemctl list-units --type=service | awk '{ print $1 }' | grep '.service' | awk -F: 'NR=='$max' {print $1}')

    echo "$val"

    max=$(($max+1))

test=$(systemctl status $val | grep $name )

if [ ! -z $test ]; then

echo "ok"

systemctl restart $val

echo "MAPPING $val restarted"

else

echo "NAME MAPPING NOT MACHED"

fi

done


}
fi


####################################################################################################
										WINDOWS
#####################################################################################################

NODE-SCRIPT
************

### print the top 5 io process ###

gwmi Win32_PerfFormattedData_PerfProc_Process | sort IOReadBytesPersec -des | select  Name -First 6 | out-file -filepath C:\top5io_name.txt

$name = Get-Content "C:\top5io_name.txt" | Select-Object -last 7 | where{$_ -ne ""}

$name2 = $name -replace '\s',''
#Write-Output("$name2")

### calculate the io usage of the system ###

$Counter = Get-Counter -Counter "\LogicalDisk(*)\Avg. Disk sec/Write"

$Counter.CounterSamples[4] |  select-object CookedValue | out-file -filepath C:\io_data.txt

$total = Get-Content "C:\io_data.txt" | Select-Object -Index 3 | where{$_ -ne ""}
#Write-Output "$total"

if($total -le 60){
   Write-Output("ok - Usage of $total top5 io process --> $name2")
   exit 0
} elseif($total -ge 61 -and $total -le 70){

   Write-Output("WARNING - Usage of $total top5 io process --> $name2")
   exit 1
}
 elseif($total -ge 71 ){

   Write-Output("CRITICAL - Usage of $total top5 io process --> $name2")
   exit 2
}
 else{
   Write-Output("UNKNOWN - Usage of $total top5 io process --> $name2")
   exit 3
}

RUNDECK-SCRIPT
***************

gwmi Win32_PerfFormattedData_PerfProc_Process | sort IOReadBytesPersec -des | select  IDProcess -First 6  | out-file -filepath C:\first_io_pid.txt

$pid1 = get-content C:\first_io_pid.txt | Select-Object -Index 3

$check=0

$num=0

if ($pid1 -ge $num)
{
	
Write-Output  "first ---> $pid1"

################ service restart value1 #######################

$value=get-service | select-object Name | out-file -filepath C:\topcpu.txt

$count=(get-service | select-object Name).Length

$count1=$count+1

$val=2

while($val -le $count1)
     {
      $val++
      Write-Output  "$val"

          $value2=Get-Content "C:\topcpu.txt" | Select-Object -Index $val

          $space=$value2 -replace '\s',''

          #Write-Output "$value2"

          $value3=tasklist /svc /fi "SERVICES eq $space" | select-string $pid1

          if($value3)
          {
                  Write-Output "service#############$space#######restared"
                  Restart-Service  $space
                  
				  $check=$check+1
          }
          else
          {
                  Write-Output "ONE NO VALUE"
          }

          #Write-Output "$value3"
     }




}

else

{
	
$pid2 = get-content C:\first_io_pid.txt | Select-Object -Index 4
Write-Output  "second --> $pid2"

################ service restart value2 #######################

$value=get-service | select-object Name | out-file -filepath C:\topcpu.txt

$count=(get-service | select-object Name).Length

$count1=$count+1

$val=2

while($val -le $count1)
     {
      $val++
      Write-Output  "$val"

          $value2=Get-Content "C:\topcpu.txt" | Select-Object -Index $val

          $space=$value2 -replace '\s',''

          #Write-Output "$value2"

          $value3=tasklist /svc /fi "SERVICES eq $space" | select-string $pid2

          if($value3)
          {
                  Write-Output "service#############$space#######restared"
                  Restart-Service  $space
                  $check=$check+1
          }
          else
          {
                  Write-Output "TWO NO VALUE"
          }

          #Write-Output "$value3"
     }	
	


}

if ($check -ge 1)

{
	Write-Output "SERVICE RESTARED"
}

else

{
	Write-Output "NO SERVICE RESTARED"
	gwmi Win32_PerfFormattedData_PerfProc_Process | sort IOReadBytesPersec -des | select  name -First 6  | out-file -filepath C:\first_io_name.txt

$name1 = get-content C:\first_io_name.txt | Select-Object -Index 3  | where{$_ -ne ""}
$name2 = get-content C:\first_io_name.txt | Select-Object -Index 4  | where{$_ -ne ""}

$pattern = '[^a-zA-Z]'

$name1 -replace $pattern, '' |  where{$_ -ne ""} | out-file -filepath C:\aaa1.txt
$name2 -replace $pattern, '' |  where{$_ -ne ""} | out-file -filepath C:\aaa2.txt


$total ="Total"

$filter1 = get-content C:\aaa1.txt | Select-Object -Index 0  | where{$_ -ne ""}
$filter2 = get-content C:\aaa2.txt | Select-Object -Index 0  | where{$_ -ne ""}

Write-Output "$filter1"


$check=0


if ($filter1 -eq $total)

{
	Write-Output "EQUAL  $filter1-->$total"
	
	$value=get-service | select-object Name | out-file -filepath C:\topcpu.txt

$count=(get-service | select-object Name).Length

$count1=$count+1

$val=2

while($val -le $count1)
     {
      $val++
      Write-Output  "$val"

          $value2=Get-Content "C:\topcpu.txt" | Select-Object -Index $val

          $space=$value2 -replace '\s',''

          #Write-Output "$value2"

          $value3=$space | select-string $filter2

          if($value3)
          {
                  Write-Output "service#############$space#######restared"
                  Restart-Service  $space
                  
				  $check=$check+1
          }
          else
          {
                  Write-Output "TWO NO #NAME# VALUES"
          }

          #Write-Output "$value3"
     }
		
}
else
{
	Write-Output "NOT EQUAL  #$filter1#$total#"
	
$value=get-service | select-object Name | out-file -filepath C:\topcpu.txt

$count=(get-service | select-object Name).Length

$count1=$count+1

$val=2

while($val -le $count1)
     {
      $val++
      Write-Output  "$val"

          $value2=Get-Content "C:\topcpu.txt" | Select-Object -Index $val

          $space=$value2 -replace '\s',''

          #Write-Output "$value2"

          $value3=$space| select-string $filter1

          if($value3)
          {
                  Write-Output "service#############$space#######restared"
                  Restart-Service  $space
                  
				  $check=$check+1
          }
          else
          {
                  Write-Output "ONE NO #NAME# VALUE"
          }

          #Write-Output "$value3"
     }
	
}
}