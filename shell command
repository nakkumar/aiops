memory increase (90%)
*********************
 stress-ng --vm-bytes $(awk '/MemAvailable/{printf "%d\n", $2 * 0.9;}' < /proc/meminfo)k --vm-keep -m 1
 
 linux dummy high volum file creation
 *************************************
 syntax: 
********
 fallocate -l (size od the file) (file_name)
 example:
********
 fallocate -l 50G big_file    
 
 Windows dummy high volum file creation
 **************************************
syntax: 
********
fsutil file createnew filename length
example:
********
fsutil file createnew test.txt 52428800  ---> it will create a 50MB test.txt file
 
size x 1024 x 1024 
50(mb) x 1024 x 1024 = 52428800

install locate
***************
yum install mlocate -y 
sudo updatedb && locate -e bench-repo

web-response
************
curl -s -w 'Testing Website Response Time for :%{url_effective}\n\nLookup Time:\t\t%{time_namelookup}\nConnect Time:\t\t%{time_connect}\nPre-transfer Time:\t%{time_pretransfer}\nStart-transfer Time:\t%{time_starttransfer}\n\nTotal Time:\t\t%{time_total}\n' -o /dev/null http://192.168.4.115/demo.php

web-response windows
*********************
$url = 'http://www.powershell.com'


# track execution time:
$timeTaken = Measure-Command -Expression {
  $site = Invoke-WebRequest -Uri $url
}

$milliseconds = $timeTaken.TotalMilliseconds

$milliseconds = [Math]::Round($milliseconds, 1)

"This took $milliseconds ms to execute"





websit url ---> http://192.168.4.115/demo.php

stree the website
******************
good --> ab -kc 100 -t 30 http://192.168.4.22/demo.php

ab -kc 10 -t 30 http://192.168.4.115/demo.php
ab -c 100 -n 100 -r -t 30 http://192.168.4.115/demo.php

-t 30 --> time
websit url ---> http://192.168.4.115/demo.php

check the web response time
****************************
curl -s -w %{time_total}\\n -o /dev/null http://192.168.4.115/demo.php

websit url ---> http://192.168.4.115/demo.php

######################################################################################################################################

httperf for installation centos
*******************************
wget http://ftp.tu-chemnitz.de/pub/linux/dag/redhat/el7/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.3-1.el7.rf.x86_64.rpm

rpm -Uvh rpmforge-release-0.5.3-1.el7.rf.x86_64.rpm

yum install httperf

httperf installation for ubuntu
********************************
$ git clone https://github.com/httperf/httperf.git
$ cd httperf
# read Readme.md
$ sudo yum install automake openssl-devel libtool
$ libtoolize --force
$ autoreconf -i
$ automake
$ ./configure
$ make
$ sudo make install

Verify Build ---> 
$ httperf -v | grep open
It will show something like: --->
httperf: maximum number of open descriptors = 500000

command 
*******
httperf --server 192.168.4.244 --uri /demo.php --num-conn 20 --num-cal 10 --rate 2 --timeout 5

web-page : http://192.168.4.244/demo.php

##############################################################################################################################################

clear buffer cache in linux
***************************
sync; echo 3 > /proc/sys/vm/drop_caches 

cpu utilization monitoring
*************************
cat <(grep 'cpu ' /proc/stat) <(sleep 1 && grep 'cpu ' /proc/stat) | awk -v RS="" '{print ($13-$2+$15-$4)*100/($13-$2+$15-$4+$16-$5)}'
